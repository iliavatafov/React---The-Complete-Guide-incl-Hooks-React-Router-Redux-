{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iliya\\\\Desktop\\\\JS\\\\React - The Complete Guide (incl Hooks, React Router, Redux)\\\\react-router-advanced\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EventsPage = () => {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 26\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nconst loadEvents = async () => {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw new Response(\n    //   JSON.stringify({ message: \"Could not fetch events.\", status: 500 })\n    // );\n    return json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nexport const loader = () => {\n  return defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadedEvents","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/iliya/Desktop/JS/React - The Complete Guide (incl Hooks, React Router, Redux)/react-router-advanced/frontend/src/pages/Events.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nexport const EventsPage = () => {\r\n  const { events } = useLoaderData();\r\n\r\n  return (\r\n    <Await resolve={events}>\r\n      {(loadedEvents) => <EventsList events={loadEvents} />}\r\n    </Await>\r\n  );\r\n};\r\n\r\nexport default EventsPage;\r\n\r\nconst loadEvents = async () => {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: \"Could not fetch events.\" };\r\n    // throw new Response(\r\n    //   JSON.stringify({ message: \"Could not fetch events.\", status: 500 })\r\n    // );\r\n    return json({ message: \"Could not fetch events.\" }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n};\r\n\r\nexport const loader = () => {\r\n  return defer({\r\n    events: loadEvents(),\r\n  });\r\n};\r\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAO,CAAC,GAAGN,aAAa,EAAE;EAElC,oBACEG,OAAA,CAACN,KAAK;IAACU,OAAO,EAAED,MAAO;IAAAE,QAAA,EACnBC,YAAY,iBAAKN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC/C;AAEZ,CAAC;AAACT,EAAA,CARWD,UAAU;EAAA,QACFJ,aAAa;AAAA;AAAAe,EAAA,GADrBX,UAAU;AAUvB,eAAeA,UAAU;AAEzB,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,OAAOnB,IAAI,CAAC;MAAEoB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAED,OAAO,MAAMK,MAAM,GAAGA,CAAA,KAAM;EAC1B,OAAOvB,KAAK,CAAC;IACXQ,MAAM,EAAEI,UAAU;EACpB,CAAC,CAAC;AACJ,CAAC;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}